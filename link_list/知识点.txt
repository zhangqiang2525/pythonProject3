单向链表：
1、什么是单向链表：单向链表也叫单链表，属于顺序结构
2、节点：每个节点由元素域和指针域（链接域）构成，元素域中存放数据，链接域则指向链表中的下一个节点
当该节点为链表中的最后一个节点，则链接域指向一个空值
单向链表：只有一个指向下一个节点的指针。
优点：单向链表增加删除节点简单。遍历时候不会死循环；
缺点：只能从头到尾遍历。只能找到后继，无法找到前驱，也就是只能前进。

3、单链表的操作：
1)is_empty() 链表是否为空
2)length() 链表长度
3)travel() 遍历整个链表
4)add(item) 链表头部添加元素
5)append(item) 链表尾部添加元素
6)insert(pos, item) 指定位置添加元素
7)remove(item) 删除节点
8)search(item) 查找节点是否存在
9)reversed() 反转链表
Note：
因为python中没有指针的概念，链接域指向链表中的下一个节点这句话比较生涩，写代码时我们可以理解为链接域=下一个节点

双向链表：
1、什么是双向链表：每个节点有两个链接，一个指向前一个节点，当此节点为第一个节点时，指向空值；
另外一个节点，指向当前节点的下一个节点，当此节点为最后一个节点时，指向空值
2、双向链表的操作：
1)is_empty() 链表是否为空
2)length() 链表长度
3)travel() 遍历链表
4)add(item) 链表头部添加
5)append(item) 链表尾部添加
6)insert(pos, item) 指定位置添加
7)remove(item) 删除节点
8)search(item) 查找节点是否存在

双向链表：有两个指针，一个指向前一个节点，一个后一个节点。
优点：可以找到前驱和后继，可进可退；
缺点：增加删除节点复杂，需要多分配一个指针存储空间。
